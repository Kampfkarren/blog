{"componentChunkName":"component---src-templates-article-tsx","path":"/articles/migrators-validators-and-strict-typing/","result":{"data":{"markdownRemark":{"excerpt":"Migrations, validators, and strict typing In Thoughts and Regrets on DataStore2, and the path forward, there are two features that have beenâ€¦","html":"<h1>Migrations, validators, and strict typing</h1>\n<p>In <a href=\"/@boyned/HJ0EYWvM_\">Thoughts and Regrets on DataStore2, and the path forward</a>, there are two features that have been pointed out to me as being contradictory.</p>\n<ul>\n<li>Validators (which validate a data store's value during <code class=\"language-text\">:set()</code>)</li>\n<li>Automatic migrations</li>\n</ul>\n<p>Validators are simply a function of the type <code class=\"language-text\">(possibleValue: T) =&gt; (true) | (false, error: string)</code>. The code example I gave for migrations was:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Looks like saving names was a stupid idea...</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">namesToIds</span><span class=\"token punctuation\">(</span>dataStore<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dataStore<span class=\"token punctuation\">:</span><span class=\"token function\">getStore</span><span class=\"token punctuation\">(</span>stores<span class=\"token punctuation\">.</span>Inventory<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">local</span> newInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n                table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newInventory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                    Id <span class=\"token operator\">=</span> Items<span class=\"token punctuation\">.</span><span class=\"token function\">getIdByName</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n\n            <span class=\"token keyword\">return</span> newInventory\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yep, all done! Migrations return promises.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nBikeshed<span class=\"token punctuation\">.</span><span class=\"token function\">setMigrations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> namesToIds <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There's a few issues with this though. I'll go over them individually.</p>\n<p>This migration file would work for the case of having an old inventory with names and turning it into a new inventory with IDs. The validator when the <code class=\"language-text\">:update</code> is finished would correctly check that the data is valid, since it is assumed it will be updated to check for an <code class=\"language-text\">Id</code> field rather than a <code class=\"language-text\">Name</code> field.</p>\n<p>However, let's suppose we realize we don't want an entire table for every item, and just want inventories to be a store of numbers. We'd write a migration like this...</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">namesToIds</span><span class=\"token punctuation\">(</span>dataStore<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- snip</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">idsToNumbers</span><span class=\"token punctuation\">(</span>dataStore<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dataStore<span class=\"token punctuation\">:</span><span class=\"token function\">getStore</span><span class=\"token punctuation\">(</span>stores<span class=\"token punctuation\">.</span>Inventory<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">local</span> newInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n                table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newInventory<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n\n            <span class=\"token keyword\">return</span> newInventory\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nBikeshed<span class=\"token punctuation\">.</span><span class=\"token function\">setMigrations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> namesToIds<span class=\"token punctuation\">,</span> idsToNumbers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...and our validator would become:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">Inventory<span class=\"token punctuation\">.</span>validate <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The flow of a player on the version where items are <code class=\"language-text\">{ Id: number }</code> would go through the following pipeline:</p>\n<ul>\n<li>Player connects</li>\n<li>Data store library detects they are on a version with <code class=\"language-text\">{ Id: number }[]</code>, runs the <code class=\"language-text\">idsToNumbers</code> migration.</li>\n<li>After the <code class=\"language-text\">:update</code> is finished, validator is ran.</li>\n<li>Data is an array of numbers, pass.</li>\n</ul>\n<p>This is all good. However, what happens when a player on the <em>original</em> data connects? One with <code class=\"language-text\">{ Name: string }[]</code>?</p>\n<ul>\n<li>Player connects</li>\n<li>Data store library detects they are on a version with <code class=\"language-text\">{ Name: string }[]</code>, runs the <code class=\"language-text\">namesToIds</code> migration.</li>\n<li>After the <code class=\"language-text\">:update</code> is finished, validator is run.</li>\n<li><strong>Data is an array of <code class=\"language-text\">{ Id: number }</code>, <em>not</em> an array of numbers. Fail.</strong></li>\n</ul>\n<p>Uh oh.</p>\n<p>The way we wrote our individual migrations is ideal, migrations simply apply one after the other until the version is up to date. Anything else would become frustrating to maintain. However, the problem comes with the validators being changed. We need to come up with a better solution.</p>\n<h3>Turn off validators until the last migration?</h3>\n<p>This is the most obvious solution, but I don't think it's ideal. The validators exist to protect you from yourself. I don't want situations where it's possible to corrupt your data from a bad migration. This is especially dangerous given the fact migrations are chained, and so you'll be passing in bad data from one migration to the next silently, with it only erroring in some unrelated migration.</p>\n<h3>Make migrations more generic?</h3>\n<p>This is the more ideal plan of action. Right now, migrations are <code class=\"language-text\">(dataStore: BikeshedDataStore) -&gt; Promise&lt;void&gt;</code>. This is already pretty generic, but has the issues you see in the example above. Furthermore, it's a bit tricky to test compared to something that's simply data in, data out.</p>\n<p>Let's think for a moment, what do we use migrations for?</p>\n<ul>\n<li>Mutating existing data stores (changing <code class=\"language-text\">{ Name: string }</code> to <code class=\"language-text\">{ Id: number }</code> to <code class=\"language-text\">number</code>)</li>\n<li>Deleting old, unnecessary data stores.</li>\n<li>Replacing old, unnecessary data stores (maybe replacing an \"Items\" data store to a more broader \"Inventory\" data store).</li>\n<li>(If you have another use case these do not cover, let me know!)</li>\n</ul>\n<p><em>Creating</em> new data stores is likely not under the scope of a migration (outside of replacing)--new data stores will be created when a new player joins without existing data there anyway.</p>\n<p>The first example can be abstracted to a simple <code class=\"language-text\">migration(data: T) =&gt; Promise&lt;U&gt;</code>. A function for mutating existing data stores could just be:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">idsToNumbers</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> newInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newInventory<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>newInventory<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The second one <em>could</em> be, but I believe deletion should be explicit anyway, so simply <code class=\"language-text\">migration(data: T) =&gt; Promise&lt;nil&gt;</code> being the same as deletion is a bit worrying to me. Although, this is what validators are meant to resolve anyway, so knowing that all data stores should have validators, I'm a bit more open to it (why would you allow a nil through validation other than to delete? Would someone returning nil expect it to delete, or would they expect it to somehow just preserve the nil and not try to retrieve default values later?).</p>\n<p>The third one is tricky. It involves creating new data stores, so to preserve the data in, data out behavior, <code class=\"language-text\">migration</code> would have to:</p>\n<ul>\n<li>Mutate within itself (:grimacing:)</li>\n<li>Create new data stores, <strong>still with the old validators</strong>.</li>\n</ul>\n<h2>The Solution</h2>\n<p>I should preface this with the fact that <strong>I have no idea if this solution is actually any good.</strong> This library won't be written until far in the future when I need it, so I'll hopefully figure out the kinks either then or before then.</p>\n<p>Basically, I think migrations should not just return data, and not just be blind functions, but <strong>should return actions.</strong></p>\n<p>These actions would be (names not final):</p>\n<ul>\n<li><code class=\"language-text\">migrateCreateDataStore</code></li>\n<li><code class=\"language-text\">migrateUpdateDataStore</code></li>\n<li><code class=\"language-text\">migrateDeleteDataStore</code></li>\n</ul>\n<p>Meanwhile, the migration signature turns from what it is now (<code class=\"language-text\">(dataStore: BikeshedDataStore) =&gt; Promise&lt;void&gt;</code>) into <code class=\"language-text\">(migrationInterface: BikeshedMigrationInterface) =&gt; Promise&lt;BikeshedMigration[]&gt;</code>, with <code class=\"language-text\">BikeshedMigration</code> being one of the actions above.</p>\n<p><code class=\"language-text\">BikeshedMigrationInterface</code> would be the API that actually creates the above actions. This is essentially for namespacing, and just to separate concerns more. Furthermore, it is how you would actually retrieve the data. This is separate from the data store object, as not only does this completely stop mutability without needing the data store to be read only, but also it creates better types. More on that later.</p>\n<p>What's more important, <strong>the validators are given to the actions themselves.</strong> This ensures that the data for that migration is always correct, assuming you create a new validator. While this could simply be <code class=\"language-text\">assert</code>ed by the programmer before creating the actions, I feel that forcing a validator to be passed is much safer.</p>\n<p>Looking back at <code class=\"language-text\">namesToIds</code>, this might become:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Looks like saving names was a stupid idea...</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">namesToIds</span><span class=\"token punctuation\">(</span>migrator<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- The `get` the migrator contains takes *names*, not structs.</span>\n    <span class=\"token comment\">-- This is to further ensure migrations are correct no matter what your</span>\n    <span class=\"token comment\">-- surrounding code becomes, but also for better strict typing.</span>\n    <span class=\"token comment\">-- Again, more on that later.</span>\n    <span class=\"token keyword\">return</span> migrator\n        <span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">local</span> newInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n                table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newInventory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                    Id <span class=\"token operator\">=</span> Items<span class=\"token punctuation\">.</span><span class=\"token function\">getIdByName</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                migrator<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">updateDataStore</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">,</span>\n                    newInventory<span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">-- Because this is not a direct reference to any struct</span>\n                    <span class=\"token comment\">-- it will always be correct, even as the data changes.</span>\n                    t<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">strictInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                        Id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Something that creates data stores (for replacement) might become:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">itemsToInventory</span><span class=\"token punctuation\">(</span>migrator<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> migrator\n        <span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                migrators<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">.</span><span class=\"token function\">createDataStore</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">,</span>\n                    inventory<span class=\"token punctuation\">,</span>\n                    t<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">strictInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                        Id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n                migrations<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">.</span><span class=\"token function\">deleteDataStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2>Strict Typing</h2>\n<p>I would kill to use TypeScript and roblox-ts. They're stable enough to be used in production, as proved by Zombie Strike, and they <em>really work</em>. Even if Typed Lua had the syntax I need (such as generic function arguments, which are purportedly coming soon), it doesn't have the external tooling support required for it to fit into my workflow. The only reason I am not using roblox-ts for my next project is that I am the maintainer of <a href=\"https://github.com/Kampfkarren/selene\">Selene</a>, a Lua linter. My projects move with me, and so if I don't use these tools myself, then they won't progress.</p>\n<p>However, this data store library is going to be written in TypeScript (of course with easy inclusion into Lua projects). Data storage is simply too important and too volatile to consider Lua.</p>\n<p>This means I have to make sure my types are good. Currently, the types are looking something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> withBikeshed<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>bikeshed<span class=\"token operator\">:</span> Bikeshed<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bikeshed</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>player<span class=\"token operator\">:</span> Player<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BikeshedApi<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BikeshedApi</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token generic-function\"><span class=\"token function\">getStore</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>store<span class=\"token operator\">:</span> BikeshedDataStoreInformation<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> BikeshedDataStore<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BikeshedDataStore<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldData<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BikeshedDataStoreInformation<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TSerialized<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">serialize</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TSerialized<span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">deserialize</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> TSerialized<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quick tangent--I am unsure if this is the best way to do this. Rust has the ability to do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">trait</span> <span class=\"token class-name\">BikeshedDataStoreInformation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// vvv This is the part I want!</span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Serialized</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">serialize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Serialized</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">deserialize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Serialized</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Deserialized</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, as far as I know, TypeScript has no way of doing this, so you'll just have to do something like retrieving the types from <code class=\"language-text\">const InventoryStore: BikeshedDataStoreInformation&lt;Item[], number[]&gt;</code>, but then also need to support for data stores that don't have serializers...maybe <code class=\"language-text\">never</code>? I don't know. Tangent over.</p>\n<p>Anyway, the old migrations had a problem where your migrations wouldn't be able to even compile without using tricks like <code class=\"language-text\">unknown</code>. Consider the old data implementation, but in TS.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OldItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">namesToIds</span><span class=\"token punctuation\">(</span>dataStore<span class=\"token operator\">:</span> BikeshedApi<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dataStore <span class=\"token operator\">=</span> dataStore<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">getStore</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>OldItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>stores<span class=\"token punctuation\">.</span>Inventory<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dataStore<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            newInventory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                Id<span class=\"token operator\">:</span> Items<span class=\"token punctuation\">.</span><span class=\"token function\">getIdByName</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> newInventory\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem here is in our <code class=\"language-text\">update</code> function. <code class=\"language-text\">update</code> is defined as <code class=\"language-text\">update(callback: (oldData: T) =&gt; T): Promise&lt;void&gt;</code>. Meaning, it takes T (in this case OldItem[]) and expects T to come out. Instead, we are returning <code class=\"language-text\">{ Id: number }[]</code>. This would be frustrating with TypeScript.</p>\n<p>However, with my proposal, these types can now be separated better. Let's consider the remake.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">namesToIds</span><span class=\"token punctuation\">(</span>migrator<span class=\"token operator\">:</span> BikeshedMigratorInterface<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>BikeshedMigrationAction<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> inventory<span class=\"token operator\">:</span> OldItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> migrator<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> newInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newInventory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            Id<span class=\"token operator\">:</span> Items<span class=\"token punctuation\">.</span><span class=\"token function\">getIdByName</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        migrator<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">updateDataStore</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Inventory\"</span><span class=\"token punctuation\">,</span>\n            newInventory<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// This is now, ideally, unnecessary, but for the sake of example...</span>\n            t<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">strictInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                Id<span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The types of everything are now sound!</p>\n<p><code class=\"language-text\">migrator.get(key: string)</code> would just return <code class=\"language-text\">T</code>, in this case, the inferred <code class=\"language-text\">OldItem[]</code>. <code class=\"language-text\">migrator.actions.updateDataStore</code>, a completely separate function, would accept its own arbitrary type, in this case the inferred <code class=\"language-text\">{ Id: number }</code>. Wonderful!</p>","frontmatter":{"date":"2021-03-03","title":"Migrations, validators, and strict typing"}}},"pageContext":{"slug":"/migrators-validators-and-strict-typing/"}},"staticQueryHashes":["2428300253"]}