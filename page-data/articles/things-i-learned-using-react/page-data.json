{
    "componentChunkName": "component---src-templates-article-tsx",
    "path": "/articles/things-i-learned-using-react/",
    "result": {"data":{"markdownRemark":{"excerpt":"I've been using Roact, and now react-lua on Roblox for several years. In recent years, hooks, whether through react-lua exposing themâ€¦","html":"<p>I've been using Roact, and now react-lua on Roblox for several years. In recent years, hooks, whether through react-lua exposing them natively, or through my own <a href=\"https://github.com/Kampfkarren/roact-hooks\">roact-hooks package</a>, and Luau have changed everything, and <a href=\"https://github.com/Kampfkarren/zombie-strike\">Zombie Strike is no longer as great a repository to learn from</a> (though it's far far better than nothing!).</p>\n<p>Here's an uncategorized list of tricks I do to make using React a lot easier and safer. A lot of these tricks work in Roact with roact-hooks, though I make no guarantees.</p>\n<h2><code class=\"language-text\">e = React.createElement</code></h2>\n<p>This one is common, but let's start with it because you'll see it in all my samples. <code class=\"language-text\">React.createElement</code> is extremely common, and extremely noisy. The Roblox community has decided on the following idiom:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement</code></pre></div>\n<p>While I am definitely generally against shortening variable names, even something like <code class=\"language-text\">ply</code>, <code class=\"language-text\">e</code> definitely improves the ability to read any React component, as it helps you keep focus on the structure that actually matters. Furthermore, as this is the de facto standard in the Roblox community, other experienced developers should know what you mean.</p>\n<h2>Use strict mode</h2>\n<p>If you already have an established codebase, start putting <code class=\"language-text\">--!strict</code> at the top of all your new files. If you're starting a new one, create a .luaurc with <code class=\"language-text\">{ &quot;languageMode&quot;: &quot;strict&quot; }</code>, which Luau LSP will read.</p>\n<p>Strict mode is critical for avoiding bugs in Luau in general, but especially in React, as it will immediately tell you if you are using a component wrong. For example, let's take the following component.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">HealthBar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\thealth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- code</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In strict mode, writing out something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>HealthBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\thelath <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Typo!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...will provide an error.</p>\n<p>However, if you are going to use strict mode, there's some caveats you'll need to remember.</p>\n<h3>useState and optionals</h3>\n<p><code class=\"language-text\">useState</code> is typed in React, but Luau is not great at guessing those types on its own. Trivial cases work fine. In this example, <code class=\"language-text\">amount</code> is typed as <code class=\"language-text\">number</code>, and <code class=\"language-text\">setAmount</code> takes both <code class=\"language-text\">number</code> and <code class=\"language-text\">(number) -&gt; number</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> amount<span class=\"token punctuation\">,</span> setAmount <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, let's say that we want <code class=\"language-text\">amount</code> to be <code class=\"language-text\">number?</code>. If you wrote it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> amount<span class=\"token punctuation\">,</span> setAmount <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...then <code class=\"language-text\">amount</code> and <code class=\"language-text\">setAmount</code> both are typed for <code class=\"language-text\">nil</code>. This is expected, but both obvious ways of resolving this have their own caveats.</p>\n<p>If we try typing <code class=\"language-text\">amount</code> as <code class=\"language-text\">number?</code>...</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> amount<span class=\"token punctuation\">:</span> number?<span class=\"token punctuation\">,</span> setAmount <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...then while <code class=\"language-text\">amount</code> is treated as <code class=\"language-text\">number?</code>, <code class=\"language-text\">setAmount</code> still only takes <code class=\"language-text\">nil</code>. If you instead try...</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> amount<span class=\"token punctuation\">,</span> setAmount <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span> <span class=\"token punctuation\">::</span> number?<span class=\"token punctuation\">)</span></code></pre></div>\n<p>...then <code class=\"language-text\">amount</code> and <code class=\"language-text\">setAmount</code> will be anonymous types, and not actually be usable.</p>\n<p>The complete incantation to get <code class=\"language-text\">amount</code> as <code class=\"language-text\">number?</code>, and <code class=\"language-text\">setAmount</code> as <code class=\"language-text\">number? | (number?) -&gt; number?</code> is...</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> amount<span class=\"token punctuation\">:</span> number?<span class=\"token punctuation\">,</span> setAmount <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span> <span class=\"token punctuation\">::</span> number?<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sigh.</p>\n<p>A similar trick is also necessary for unions:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">type MenuState <span class=\"token operator\">=</span> <span class=\"token string\">\"open\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"closed\"</span>\n\n<span class=\"token keyword\">local</span> menuState<span class=\"token punctuation\">:</span> MenuState<span class=\"token punctuation\">,</span> setMenuState <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span> <span class=\"token punctuation\">::</span> MenuState<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Intersections don't work very well</h3>\n<p>I haven't been able to come up with a minimum repro of this for the Luau team, but disappointingly, intersections are unusable as a props type.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">type Base <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ntype Value <span class=\"token operator\">=</span> Base <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n\ty<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tvalue<span class=\"token punctuation\">:</span> Value<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- code</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tvalue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this case, <code class=\"language-text\">value</code> will incorrectly say that it is not valid in this context.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TypeError: Type &#39;{ value: { x: number, y: number } }&#39; could not be converted into &#39;a?&#39;\ncaused by:\n  None of the union options are compatible. For example: \nType\n    &#39;{ value: { x: number, y: number } }&#39;\ncould not be converted into\n    &#39;{| value: Base &amp; {| y: number |} |}&#39;\ncaused by:\n  Property &#39;value&#39; is not compatible. \nType\n    &#39;{ x: number, y: number }&#39;\ncould not be converted into\n    &#39;Base &amp; {| y: number |}&#39;\ncaused by:\n  Not all intersection parts are compatible. \nTable type &#39;{ x: number, y: number }&#39; not compatible with type &#39;Base&#39; because the former has extra field &#39;y&#39;</code></pre></div>\n<p>In cases like this, the best we can do to keep ourselves safe is something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- This will error if we don't match the type</span>\n<span class=\"token keyword\">local</span> value<span class=\"token punctuation\">:</span> Value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tvalue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Invalid property names don't error</h3>\n<p>This one is the most dangerous: unused properties will not error.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">HealthBar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\thealth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- code</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>HealthBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\thealth <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n\tmaxHealth <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This code will not error, as <code class=\"language-text\">health = 1</code> is enough to make this match <code class=\"language-text\">props</code>, but the <code class=\"language-text\">maxHealth</code> will be completely unused.</p>\n<h3><code class=\"language-text\">React.ReactNode</code></h3>\n<p>Strict mode requires that a function have a consistent return value. For example, this will fail in strict mode:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ContextualHealthBar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\thealth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\tmaxHealth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> props<span class=\"token punctuation\">.</span>health <span class=\"token operator\">==</span> props<span class=\"token punctuation\">.</span>maxHealth <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token comment\">-- ERROR: We only expect to return nil</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>HealthBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\thealth <span class=\"token operator\">=</span> health<span class=\"token punctuation\">,</span>\n\t\tmaxHealth <span class=\"token operator\">=</span> maxHealth<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The above case of optional returns comes up all the time. Thus, it is helpful to know that <code class=\"language-text\">createElement</code> returns a <code class=\"language-text\">React.ReactNode</code>. With that in mind, we can add this to the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ContextualHealthBar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\thealth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\tmaxHealth<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode?</code></pre></div>\n<p>...and our code will now validate.</p>\n<h2>Don't type layout orders by hand</h2>\n<p>Unlike HTML, where elements have a defined order, in Roblox we must specify a <code class=\"language-text\">LayoutOrder</code> for elements governed by automatic layouts, such as <code class=\"language-text\">UIListLayout</code>. The obvious way to do this is to write code that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">TitleButtons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Frame<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tUIListLayout <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UIListLayout\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tFillDirection <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span>FillDirection<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">,</span>\n\t\t\tSortOrder <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span>SortOrder<span class=\"token punctuation\">.</span>LayoutOrder<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\tMinimize <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tLayoutOrder <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\tMaximize <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tLayoutOrder <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\tClose <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tLayoutOrder <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>However, this quickly becomes a nightmare as your components get more and more complex, and with different elements being contextual. Updating this code to add new elements means that you must go and update every other value.</p>\n<p>Instead, use a function that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createNextOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> number\n\t<span class=\"token keyword\">local</span> layoutOrder <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tlayoutOrder <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">return</span> layoutOrder\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> createNextOrder</code></pre></div>\n<p>This function will return another function (a pattern known as \"higher order functions\") that will return an incrementing number. With this in our toolbelt, we can now update our original code to look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">TitleButtons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> nextOrder <span class=\"token operator\">=</span> <span class=\"token function\">createNextOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tUIListLayout <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UIListLayout\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tFillDirection <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span>FillDirection<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">,</span>\n\t\t\tSortOrder <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span>SortOrder<span class=\"token punctuation\">.</span>LayoutOrder<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\tMinimize <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tLayoutOrder <span class=\"token operator\">=</span> <span class=\"token function\">nextOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\tMaximize <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tLayoutOrder <span class=\"token operator\">=</span> <span class=\"token function\">nextOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\tClose <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tLayoutOrder <span class=\"token operator\">=</span> <span class=\"token function\">nextOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Now we can update our component definition however we want and not have to care about layout order being correct.</p>\n<h2>Use <code class=\"language-text\">and</code> to conditionally show components</h2>\n<p>If you want to only show a component when a condition is met, the cleanest way to do that is with <code class=\"language-text\">and</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> storeOpen<span class=\"token punctuation\">,</span> setStoreOpen <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tStore <span class=\"token operator\">=</span> storeOpen <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This works because of two tricks.</p>\n<p>The first is that <code class=\"language-text\">x and y</code> does <strong>not</strong> return a boolean all the time. <code class=\"language-text\">x and y</code> is defined as returning <code class=\"language-text\">x</code> if it's falsy (that is, it is <code class=\"language-text\">nil</code> or <code class=\"language-text\">false</code>), and <code class=\"language-text\">y</code> otherwise.</p>\n<p>We can observe this behavior with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span> <span class=\"token keyword\">and</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 1</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span> <span class=\"token keyword\">and</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- false</span></code></pre></div>\n<p>The second is that <code class=\"language-text\">false</code> is a valid React node, it just won't render. Thus, <code class=\"language-text\">storeOpen and e(Store)</code> will read as \"if the store is open, render a Store component, otherwise render false\".</p>\n<p>Luau also has the \"if expression\" syntax, where you can write <code class=\"language-text\">if condition then resultIfTrue else resultIfFalse</code>, though I choose to only use this in cases where the <code class=\"language-text\">and</code> trick doesn't work, or when I actually have a value to return in both cases.</p>\n<h2><code class=\"language-text\">useToggleState</code></h2>\n<p>It is very common to have menus that open up and buttons that close them, or differences in UI when hovering over something. Let's expand our last example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> storeOpen<span class=\"token punctuation\">,</span> setStoreOpen <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> storeButtonHovered<span class=\"token punctuation\">,</span> setStoreButtonHovered <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tStorePage <span class=\"token operator\">=</span> storeOpen <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Store<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tonClose <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">setStoreOpen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token comment\">-- later</span>\n\t\tStoreButton <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\n\t\t\tBackgroundColor3 <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> storeButtonHovered <span class=\"token keyword\">then</span> Colors<span class=\"token punctuation\">.</span>white <span class=\"token keyword\">else</span> Colors<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span>\n\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>Activated<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">setStoreOpen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>MouseEnter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">setStoreButtonHovered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>MouseLeave<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">setStoreButtonHovered</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This pattern comes up so often that I recommend this custom hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useToggleState</span><span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\ton<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n\tenable<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tdisable<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\ttoggle<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> toggled<span class=\"token punctuation\">,</span> setToggled <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> enable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">setToggled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> disable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">setToggled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> toggle <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">setToggled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>currentToggled<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> currentToggled\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\ton <span class=\"token operator\">=</span> toggled<span class=\"token punctuation\">,</span>\n\t\tenable <span class=\"token operator\">=</span> enable<span class=\"token punctuation\">,</span>\n\t\tdisable <span class=\"token operator\">=</span> disable<span class=\"token punctuation\">,</span>\n\t\ttoggle <span class=\"token operator\">=</span> toggle<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> useToggleState</code></pre></div>\n<p>This simply packages all the useful stuff you'll need. Our previous example will now look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> storeOpen <span class=\"token operator\">=</span> <span class=\"token function\">useToggleState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> storeButtonHovered <span class=\"token operator\">=</span> <span class=\"token function\">useToggleState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tStorePage <span class=\"token operator\">=</span> storeOpen<span class=\"token punctuation\">.</span>on <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Store<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tonClose <span class=\"token operator\">=</span> storeOpen<span class=\"token punctuation\">.</span>disable<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token comment\">-- later</span>\n\t\tStoreButton <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextButton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">-- etc</span>\n\n\t\t\tBackgroundColor3 <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> storeButtonHovered<span class=\"token punctuation\">.</span>on <span class=\"token keyword\">then</span> Colors<span class=\"token punctuation\">.</span>white <span class=\"token keyword\">else</span> Colors<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span>\n\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>Activated<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> storeOpen<span class=\"token punctuation\">.</span>enable<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>MouseEnter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> storeButtonHovered<span class=\"token punctuation\">.</span>enable<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>MouseLeave<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> storeButtonHovered<span class=\"token punctuation\">.</span>disable<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This also has the benefit of avoiding creating more anonymous functions which can help performance, as the identity of anonymous functions changes every render, requiring React to disconnect and reconnect any event you connect it to.</p>\n<h2><code class=\"language-text\">createUniqueKey</code></h2>\n<p>Every child in a React component should have a key associated with it. This means that code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...is wrong. This is not just because looking at the UI in the explorer will be a pain, but also because if this list of children changes at all, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tshowMinimize <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tshowMaximize <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tshowClose <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...that the keys these associated to will change. This can incur costs in completely unmounting and remounting the components, as React will treat them as completely separate objects. Furthermore, you will also lose any internal state these components had.</p>\n<p>The above code should instead be written as:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tMinimize <span class=\"token operator\">=</span> showMinimize <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tMaximize <span class=\"token operator\">=</span> showMaximize <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tClose <span class=\"token operator\">=</span> showClose <span class=\"token keyword\">and</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">--[[ etc ]]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, this rule can become tricky when it comes to completely dynamic objects. For example, if we were making a todo list component, we would not want to write it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tentries<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> entry <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">.</span>entries <span class=\"token keyword\">do</span>\n\t\tchildren<span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>TodoEntry<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\ttext <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>...as putting the same entry twice will only show one of them. We can solve this problem by using the index somehow, but we get the same problem as before where changing the list will waste a lot of computation on tearing down and setting back up the other components.</p>\n<p>For this reason, I recommend the following higher order function:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- If you ever want to use an indice in a React name, use this instead.</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createUniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> string\n\t<span class=\"token keyword\">local</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> names<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n\t\t\tnames<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token keyword\">return</span> name\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token comment\">-- Edge case in case of:</span>\n\t\t\t<span class=\"token comment\">-- uniqueKey(\"foo\") -- foo</span>\n\t\t\t<span class=\"token comment\">-- uniqueKey(\"foo_2\") -- foo_2</span>\n\t\t\t<span class=\"token comment\">-- uniqueKey(\"foo\") -- foo_2 (clash)</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n\t\t\t\tnames<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t\t\t<span class=\"token keyword\">local</span> finalName <span class=\"token operator\">=</span> `<span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token function\">_</span><span class=\"token punctuation\">{</span>names<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>`\n\n\t\t\t\t<span class=\"token keyword\">if</span> names<span class=\"token punctuation\">[</span>finalName<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> finalName\n\t\t\t\t<span class=\"token keyword\">end</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This function has the following behavior:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> uniqueKey <span class=\"token operator\">=</span> <span class=\"token function\">createUniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">uniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Returns \"Dog\"</span>\n<span class=\"token function\">uniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Returns \"Cat\"</span>\n<span class=\"token function\">uniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Returns \"Dog_2\"</span></code></pre></div>\n<p>Thus our component would now look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tentries<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> uniqueKey <span class=\"token operator\">=</span> <span class=\"token function\">createUniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> entry <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">.</span>entries <span class=\"token keyword\">do</span>\n\t\tchildren<span class=\"token punctuation\">[</span><span class=\"token function\">uniqueKey</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>TodoEntry<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\ttext <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Note that the existing caveat <strong>still</strong> exists in the form of if we have multiple duplicated names, as changing the amount of those will cause keys to change. However, in my experience this is very rare, and we at least only incur the cost in those cold cases rather than in all list changes.</p>\n<h3><code class=\"language-text\">useClock</code></h3>\n<p><a href=\"https://twitter.com/Kampfkarren/status/1670887131299061760\">I have written a Twitter thread on this before, so I will keep it somewhat brief.</a></p>\n<p>For animations, I use <a href=\"https://create.roblox.com/docs/reference/engine/classes/TweenService#GetValue\"><code class=\"language-text\">TweenService:GetValue()</code></a>, with the alpha being <code class=\"language-text\">timeSpent / timeToAnimate</code>.</p>\n<p>In order to know that <code class=\"language-text\">timeSpent</code> value, I have a <code class=\"language-text\">useClock</code> hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>Binding<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">local</span> clockBinding<span class=\"token punctuation\">,</span> setClockBinding <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useBinding</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\tReact<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">local</span> stepConnection <span class=\"token operator\">=</span> RunService<span class=\"token punctuation\">.</span>PostSimulation<span class=\"token punctuation\">:</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">setClockBinding</span><span class=\"token punctuation\">(</span>clockBinding<span class=\"token punctuation\">:</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> delta<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tstepConnection<span class=\"token punctuation\">:</span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> clockBinding\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This returns a binding to the amount of time since the component was mounted.</p>\n<p>As an example, here is code to animate a white screen that fades out:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Flash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> clockBinding <span class=\"token operator\">=</span> <span class=\"token function\">useClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tBackgroundColor3 <span class=\"token operator\">=</span> Color3<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tSize <span class=\"token operator\">=</span> UDim2<span class=\"token punctuation\">.</span><span class=\"token function\">fromScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token comment\">-- Note: In strict mode, it is often necessary to type the mapped parameter of a binding</span>\n\t\tBackgroundTransparency <span class=\"token operator\">=</span> clockBinding<span class=\"token punctuation\">:</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>clock<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>clock <span class=\"token operator\">/</span> FADE_IN_TIME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2><code class=\"language-text\">useEventConnection</code></h2>\n<p>And while we're on the topic of custom hooks, here's a very simple one for hooking onto an event and disconnecting from it when you're done.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> useEventConnection<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">...</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n\tevent<span class=\"token punctuation\">:</span> RBXScriptSignal<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">...</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- Can also include | Signal.Signal&lt;T...> if you're using a custom signal type</span>\n\tcallback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tdependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> any <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> cachedCallback <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> callback\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">)</span>\n\n\tReact<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">local</span> connection <span class=\"token operator\">=</span> event<span class=\"token punctuation\">:</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>cachedCallback<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tconnection<span class=\"token punctuation\">:</span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> event<span class=\"token punctuation\">,</span> cachedCallback <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">::</span> <span class=\"token punctuation\">{</span> unknown <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> useEventConnection</code></pre></div>\n<p>To be used like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">useEventConnection</span><span class=\"token punctuation\">(</span>humanoid<span class=\"token punctuation\">.</span>Died<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>`You died! You <span class=\"token function\">did</span> <span class=\"token punctuation\">{</span>damage<span class=\"token punctuation\">}</span> damage before you did<span class=\"token punctuation\">.</span>`<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> damage <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Use DEV mode</h2>\n<p>DEV mode, activated through <code class=\"language-text\">_G.__DEV__</code>, is useful for catching a lot of bugs that Luau cannot, such as calling state setters in your render function, as well as for providing more useful stack traces in general.</p>\n<p>I recommend turning it on in Studio, as it carries a non-negligible performance cost. I do this by putting this at the top of my React wally package source:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">_G<span class=\"token punctuation\">.</span>__DEV__ <span class=\"token operator\">=</span> game<span class=\"token punctuation\">:</span><span class=\"token function\">GetService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RunService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">IsStudio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In fact, I have the following PowerShell script that I use instead of <code class=\"language-text\">wally install</code> to make sure it doesn't go away:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">wally install\n\n$reactContents <span class=\"token operator\">=</span> <span class=\"token string\">\"_G.__DEV__ = game:GetService('RunService'):IsStudio()`n\"</span>\n$reactContents <span class=\"token operator\">=</span> $reactContents <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Get<span class=\"token operator\">-</span>Content <span class=\"token operator\">-</span>Path <span class=\"token punctuation\">.</span>\\Packages\\React<span class=\"token punctuation\">.</span>lua <span class=\"token operator\">-</span>Encoding ASCII <span class=\"token operator\">-</span>Raw<span class=\"token punctuation\">)</span>\n\nSet<span class=\"token operator\">-</span>Content <span class=\"token operator\">-</span>Path <span class=\"token punctuation\">.</span>\\Packages\\React<span class=\"token punctuation\">.</span>lua <span class=\"token operator\">-</span>Value $reactContents <span class=\"token operator\">-</span>Encoding ASCII</code></pre></div>\n<h2>Expose native properties through a <code class=\"language-text\">native</code> table</h2>\n<p>It is very common to wrap basic Roblox instances in a component for the sake of easier styling or other utilities. I have a <code class=\"language-text\">Pane</code> component, for instance. Let's create one that looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Pane</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tchildren<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- Some nice defaults</span>\n\t\tBackgroundTransparency <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tBorderSizePixel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tSize <span class=\"token operator\">=</span> UDim2<span class=\"token punctuation\">.</span><span class=\"token function\">fromScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>However, we of course want the ability to write in our own properties. Traditionally, people like to do this by extending the properties itself, such that the following code will work:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Pane<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tPosition <span class=\"token operator\">=</span> UDim2<span class=\"token punctuation\">.</span><span class=\"token function\">fromScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This would have to be implemented to look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Pane</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tchildren<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> native <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- Remove any extra fields</span>\n\tnative<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- Some nice defaults</span>\n\t\tBackgroundTransparency <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tBorderSizePixel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tSize <span class=\"token operator\">=</span> UDim2<span class=\"token punctuation\">.</span><span class=\"token function\">fromScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>However, I really dislike this approach for a few reasons. One is that every time we add a new property, we must now keep that list of omitted properties up to date--for example, the <code class=\"language-text\">Pane</code> component in My Movie has several utilities on top of it for automatically creating layouts, setting aspect ratios, etc. Second, it means that invalid properties will now <em>definitely</em> get through Luau. Third, it means that if Roblox ever adds a property named the same as yours, you now have problems as you try to force it into your component.</p>\n<p>For these reasons, I choose to have a <code class=\"language-text\">native</code> property instead.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Pane</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tnative<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> any <span class=\"token punctuation\">}</span>?<span class=\"token punctuation\">,</span>\n\tchildren<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- Some nice defaults</span>\n\t\tBackgroundTransparency <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tBorderSizePixel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tSize <span class=\"token operator\">=</span> UDim2<span class=\"token punctuation\">.</span><span class=\"token function\">fromScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>native<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>...which would then be used as:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Pane<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tnative <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tPosition <span class=\"token operator\">=</span> UDim2<span class=\"token punctuation\">.</span><span class=\"token function\">fromScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Create testable components by splitting them into two</h2>\n<p>Let's say I have the following component:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Leaderboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> entries<span class=\"token punctuation\">,</span> setEntries <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tReact<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ttask<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">setEntries</span><span class=\"token punctuation\">(</span>ReplicatedStorage<span class=\"token punctuation\">.</span>Remotes<span class=\"token punctuation\">.</span>GetLeaderboardEntries<span class=\"token punctuation\">:</span><span class=\"token function\">InvokeServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> userId<span class=\"token punctuation\">,</span> score <span class=\"token keyword\">in</span> entries <span class=\"token keyword\">do</span>\n\t\tchildren<span class=\"token punctuation\">[</span>`<span class=\"token function\">Player_</span><span class=\"token punctuation\">{</span>userId<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>LeaderboardEntry<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tuserId <span class=\"token operator\">=</span> UserId<span class=\"token punctuation\">,</span>\n\t\t\tscore <span class=\"token operator\">=</span> score<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This component can be easily incorporated just through <code class=\"language-text\">e(Leaderboard)</code>. However, if we try to create a <a href=\"https://github.com/Kampfkarren/hoarcekat\">Hoarcekat story</a> using it, we face a problem where <code class=\"language-text\">GetLeaderboardEntries</code> doesn't exist.</p>\n<p>For this reason, I like to split my components into two:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Leaderboard</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tentries<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> userId<span class=\"token punctuation\">,</span> score <span class=\"token keyword\">in</span> entries <span class=\"token keyword\">do</span>\n\t\tchildren<span class=\"token punctuation\">[</span>`<span class=\"token function\">Player_</span><span class=\"token punctuation\">{</span>userId<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>LeaderboardEntry<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\tuserId <span class=\"token operator\">=</span> userId<span class=\"token punctuation\">,</span>\n\t\t\tscore <span class=\"token operator\">=</span> score<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">LeaderboardConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> entries<span class=\"token punctuation\">,</span> setEntries <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tReact<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ttask<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">setEntries</span><span class=\"token punctuation\">(</span>ReplicatedStorage<span class=\"token punctuation\">.</span>Remotes<span class=\"token punctuation\">.</span>GetLeaderboardEntries<span class=\"token punctuation\">:</span><span class=\"token function\">InvokeServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Leaderboard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tentries <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As you can see, we now have a <code class=\"language-text\">Leaderboard</code> component, which simply accepts data and renders it, and a <code class=\"language-text\">LeaderboardConnected</code> component, which simply retrieves that data.</p>\n<p>After exporting both, now our Hoarcekat story can look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Leaderboard<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tentries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token number\">156</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token number\">261</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Use Context, not Rodux</h2>\n<p>I don't use Rodux anymore. It splits code up far too much, and now that <a href=\"https://react.dev/learn/passing-data-deeply-with-context\">React Context</a> is a thing, I don't see any reason to depend on it anymore. For similar reasons, I no longer use Redux on the web.</p>\n<p>React Context is an extremely powerful tool. I like to create contexts specific to the features they own. For example, for currency, I might create a context that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">Context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tcoins <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...and then expand it later to include things like an easily accessible function for trying to purchase things that would open up a buy menu if you did not have enough coins.</p>\n<p>From there, my context provider would do the heavy lifting of keeping this state up to date.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">CoinsProvider</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tchildren<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> coins<span class=\"token punctuation\">,</span> setCoins <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">-- Just like before, I recommend potentailly making a \"connected\" provider that does this for easier mocking</span>\n\t<span class=\"token function\">useEventConnection</span><span class=\"token punctuation\">(</span>Remotes<span class=\"token punctuation\">.</span>UpdateCoins<span class=\"token punctuation\">.</span>OnClientEvent<span class=\"token punctuation\">,</span> setCoins<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tvalue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\tcoins <span class=\"token operator\">=</span> coins<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This would then be used by other components in the form of:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">CoinsCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> coinsContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CoinsContext<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextLabel\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- etc</span>\n\t\tText <span class=\"token operator\">=</span> coinsContext<span class=\"token punctuation\">.</span>coins<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Mocking these contexts is simple, as you can simply wrap your stories with a provider that provides some other value.</p>\n<h3>ContextStack</h3>\n<p>If you do this a lot, you might end up with something that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>ThemesContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>CoinsContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">e</span><span class=\"token punctuation\">(</span>SoundContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">-- Eventually, your code</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The code at the end is going to end up being pretty hard to read! I have the following component to help with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ContextStack</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tproviders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\tReact<span class=\"token punctuation\">.</span>ComponentType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n\t\t\tchildren<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\tchildren<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> mostRecent <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">[</span><span class=\"token operator\">#</span>props<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> providerIndex <span class=\"token operator\">=</span> <span class=\"token operator\">#</span>props<span class=\"token punctuation\">.</span>providers <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">do</span>\n\t\tmostRecent <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>providers<span class=\"token punctuation\">[</span>providerIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mostRecent<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> mostRecent\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The idea being that you can write the previous component to look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>ContextStack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tproviders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tThemesContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span>\n\t\tCoinsContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span>\n\t\tSoundContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Contexts and Luau</h3>\n<p>Luau and Context unfortunately do not mix very cleanly. To start with, the <code class=\"language-text\">value</code> type in <code class=\"language-text\">Context.Provider</code> does not appear to properly type check:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>CoinsContext<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tvalue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">-- could be anything!</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, in order to make sure you get a useful return from <code class=\"language-text\">useContext</code>, you need to make sure the context you are creating is properly typed.</p>\n<p>I go overboard by regularly reminding Luau what types I want things to be. My context modules tend to look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">export type ContextType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tcoins<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">-- By specifying ContextType like this, we guarantee that we will always fit</span>\n<span class=\"token keyword\">local</span> default<span class=\"token punctuation\">:</span> ContextType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tcoins <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">local</span> Context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tchildren<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> coins<span class=\"token punctuation\">,</span> setCoins <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">useEventConnection</span><span class=\"token punctuation\">(</span>Remotes<span class=\"token punctuation\">.</span>UpdateCoins<span class=\"token punctuation\">.</span>OnClientEvent<span class=\"token punctuation\">,</span> setCoins<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">-- Again, do this so that we force Luau to show us errors when we get this wrong</span>\n\t<span class=\"token keyword\">local</span> value<span class=\"token punctuation\">:</span> ContextType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tcoins <span class=\"token operator\">=</span> coins<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tvalue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\tContext <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">,</span>\n\tProvider <span class=\"token operator\">=</span> Provider<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">createElement</code> has more than 3 parameters</h2>\n<p>We know that createElement looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n\tcomponent<span class=\"token punctuation\">,</span> <span class=\"token comment\">-- A string for natives, a component type otherwise</span>\n\tprops<span class=\"token punctuation\">,</span>\n\tchildren\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, this isn't exactly right. There actually is no children parameter at all! It actually looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n\tcomponent<span class=\"token punctuation\">,</span>\n\tprops<span class=\"token punctuation\">,</span>\n\tchildren<span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>That's right, you can specify more than one children table, and React will merge them together!</p>\n<p>This is very useful in the case of dynamic children such as our previous todo list. Let's look at it one more time.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\tentries<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> uniqueKey <span class=\"token operator\">=</span> <span class=\"token function\">createUniqueKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> entries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> entry <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">.</span>entries <span class=\"token keyword\">do</span>\n\t\tentries<span class=\"token punctuation\">[</span><span class=\"token function\">uniqueKey</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>TodoEntry<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\ttext <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> entries<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It seems we forgot to add a UIListLayout to this! If we wanted to do that, we could shape it to look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">entries<span class=\"token punctuation\">.</span>UIListLayout <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UIListLayout\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...but especially as our component gets more complicated, it's disappointing to keep so much of our rendering code separate.</p>\n<p>We could instead do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tUIListLayout <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UIListLayout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tentries\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...where <code class=\"language-text\">join</code> is a function for immutably merging dictionaries, but we don't need this at all, and can instead write the code to look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frame\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tUIListLayout <span class=\"token operator\">=</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UIListLayout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> entries<span class=\"token punctuation\">)</span></code></pre></div>\n<p>...which I much prefer, as it keeps everything close, and will not need to be reshaped if we add dynamic content to a previously static component.</p>\n<h2>TextBoxes are weird</h2>\n<p>Web React developers will know the following pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n\t<span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n\t<span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>If you copy this same code into Roblox with <code class=\"language-text\">TextBox</code> it <em>will</em> work. However, I have found that it can perform very badly on low end devices, with React changing the value much later than people are typing. You will also get weird issues if you try to use this to limit text length. Let's suppose we have the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> value<span class=\"token punctuation\">,</span> setValue <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TextBox\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tText <span class=\"token operator\">=</span> value<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Change<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">local</span> text <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">:</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This seems like it should work to limit text lengths to 3 character, however you will actually find that it does nothing at all.</p>\n<p>What's happening is that we are setting the text value to the same thing as it was before, which React (maybe ReactRoblox? I'm not sure) ignores, so while Roblox will update the text as <code class=\"language-text\">ABCD</code>, internally we still see it as <code class=\"language-text\">ABC</code>, so it never gets updated.</p>\n<p>For these reasons, I have this decently large component:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">TextBox</span><span class=\"token punctuation\">(</span>\n\tprops<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\tinitialText<span class=\"token punctuation\">:</span> string?<span class=\"token punctuation\">,</span>\n\t\tonTextChange<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>?<span class=\"token punctuation\">,</span>\n\t\tmaxLength<span class=\"token punctuation\">:</span> number?<span class=\"token punctuation\">,</span>\n\n\t\tnative<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> any <span class=\"token punctuation\">}</span>?<span class=\"token punctuation\">,</span>\n\t\tchildren<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode?<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- Ref instead of binding/state to allow Roblox's normal updating without re-renders,</span>\n\t<span class=\"token comment\">-- which are noticably clunky on mobile.</span>\n\t<span class=\"token keyword\">local</span> currentTextRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>initialText<span class=\"token punctuation\">)</span>\n\n\tReact<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tcurrentTextRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>initialText\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span>initialText <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">local</span> onTextChange <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>textBox<span class=\"token punctuation\">:</span> TextBox<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">local</span> text <span class=\"token operator\">=</span> textBox<span class=\"token punctuation\">.</span>Text\n\n\t\t<span class=\"token keyword\">if</span> text <span class=\"token operator\">==</span> currentTextRef<span class=\"token punctuation\">.</span>current <span class=\"token keyword\">then</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">if</span> props<span class=\"token punctuation\">.</span>maxLength <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">and</span> <span class=\"token operator\">#</span>text <span class=\"token operator\">></span> props<span class=\"token punctuation\">.</span>maxLength <span class=\"token keyword\">then</span>\n\t\t\ttextBox<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">:</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>maxLength<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\tcurrentTextRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> text\n\n\t\t<span class=\"token keyword\">if</span> props<span class=\"token punctuation\">.</span>onTextChange <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n\t\t\tprops<span class=\"token punctuation\">.</span><span class=\"token function\">onTextChange</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span>onTextChange<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>maxLength <span class=\"token keyword\">or</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">::</span> <span class=\"token punctuation\">{</span> unknown <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">\"TextBox\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tText <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>initialText <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\n\t\t\t<span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Change<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> onTextChange<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>native<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tprops<span class=\"token punctuation\">.</span>children\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The idea of this component is that we rely on Roblox changing the text property, and we update our own internal state through <code class=\"language-text\">onTextChange</code>, but we step in forcefully through refs when we need to change it ourselves.</p>\n<h2>You probably don't need bindings</h2>\n<p>Bindings are a carryover from Roact that represent a 1:1 property mapping. Originally added as a performance feature, people tend to overuse them wherever they can. This is a problem as bindings are unergonomic and limited: they cannot be used to conditionally render components, you can't react to them changing easily, etc.</p>\n<p>As a rule of thumb, <strong>if you are not changing roughly every frame, you do not need a binding</strong>. For example, our <code class=\"language-text\">useClock</code> component returns a binding, which makes sense, but a binding for when an object is hovered over would not. </p>\n<p>Furthermore, you may be surprised to learn that the performance benefits of binding over state is much more negligible in react-lua than it is in legacy Roact. It's hard to get a good benchmark for this, as React has its own optimizations for delaying state updates, but I've been defaulting to no binding unless I notice performance issues for all of My Movie, and I haven't hit any case thus far where it was noticeable, which I cannot say for legacy Roact.</p>\n<h2>Mount to portals if you don't own the tree</h2>\n<p>Do not write code that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> PlayerGui <span class=\"token operator\">=</span> LocalPlayer<span class=\"token punctuation\">:</span><span class=\"token function\">WaitForChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerGui\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> tree <span class=\"token operator\">=</span> ReactRoblox<span class=\"token punctuation\">.</span><span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>PlayerGui<span class=\"token punctuation\">)</span>\ntree<span class=\"token punctuation\">:</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will appear to work, however ReactRoblox will take complete ownership over PlayerGui. This means that if the tree unmounts, updates, whatever--it will likely clear anything in there that it does not own. This means that Roblox's mobile controls, which get placed into PlayerGui, will be wiped.</p>\n<p>I've had this come up in other ways than just this. I have mounted ReactRoblox trees to player's heads, only to get errors when a TouchTransmitter object that Roblox put inside (by virtue of connecting <code class=\"language-text\">.Touched</code>, even though I never do that in my own code...) gets destroyed as a result of the tree unmounting.</p>\n<p>As a rule of thumb, once an object is in the data model, you should treat it as being forever taintable. This means that you should be using the following pattern instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> PlayerGui <span class=\"token operator\">=</span> LocalPlayer<span class=\"token punctuation\">:</span><span class=\"token function\">WaitForChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerGui\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- Mount to a dummy object...</span>\n<span class=\"token keyword\">local</span> tree <span class=\"token operator\">=</span> ReactRoblox<span class=\"token punctuation\">.</span><span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Folder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- Then portal to the PlayerGui.</span>\ntree<span class=\"token punctuation\">:</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>ReactRoblox<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PlayerGui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":21,"frontmatter":{"date":"2023-09-04","title":"Things I learned using React on Roblox"}}},"pageContext":{"slug":"/things-i-learned-using-react/"}},
    "staticQueryHashes": ["2428300253"]}