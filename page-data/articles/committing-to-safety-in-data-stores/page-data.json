{
    "componentChunkName": "component---src-templates-article-tsx",
    "path": "/articles/committing-to-safety-in-data-stores/",
    "result": {"data":{"markdownRemark":{"excerpt":"I have decided on a test game for my new data store library. I want to create a very basic video editor and theatre. You make very simpleâ€¦","html":"<p>I have decided on a test game for my <a href=\"https://blog.boyned.com/articles/thoughts-and-regrets-on-datastore2/\">new data store library</a>. I want to create a very basic video editor and theatre. You make very simple videos (think <a href=\"https://picard.ytmnd.com/\">YTMND</a>, because that's even what it's codenamed). There's a big theatre that then plays those videos one at a time, and you can give them a like if you want. The fun is getting to sit back and watch a constant stream of the amalgamations of the minds of Roblox players. But without installing TikTok.</p>\n<p>This would all work well and fine with DataStore2, but there's a catch! For you see, I want to see videos from people who aren't in the server, and who have never BEEN in the server. Even worse, <strong>I want to like videos from people who aren't in the server</strong>. Cross server writing! Global data stores! No player! Eep!</p>\n<p>Oh, and the library is called uright now. Because u write. And I'm going to get it right this time.</p>\n<h2>Wait, what's the problem?</h2>\n<p>Setting a data store without a player? Isn't that just like...data stores? You know, to store data?? What's the problem? Player persistence was deprecated like a billion years ago!</p>\n<p>The problem is caching. DataStore2, and now uright, pride themselves on being one-set one-get. You should never have to build your own caching system on top of either of these libraries.</p>\n<p>When you call <code class=\"language-text\">:get()</code>, one of two things will happen. If this is the first time we are attempting to get, then we perform the \"initial get\". This does a true call to <code class=\"language-text\">:GetAsync()</code>, as well as performing deserialization and the like. It will then cache that value. From then on, every <code class=\"language-text\">:get()</code> will not perform a second data store call. That's one-get.</p>\n<p>One-set is the opposite end. \"Setting\" to a store just updates the cached value. The one-set happens when the player leaves, that is the only time <code class=\"language-text\">:SetAsync</code> is called. You can manually call <code class=\"language-text\">:save()</code> if you wish, like when the player purchases something with Robux, or on a recurring timer, but uright does not require it.</p>\n<p>This makes working within's Roblox admittedly generous data store limits completely straight forward, with no surprises. uright will only save when it has to, or when you ask it to.</p>\n<p>The caveat here is when two servers override the same data. Consider the following scenario.</p>\n<p><strong>Server A</strong> has player Alice. When Alice is loading, our code grabs their currency and sends it to them. The initial get has been performed, and now every time Alice gets or spends money, it's the cached value that is updated.</p>\n<p><strong>Server B</strong> does not have Alice, but has an admin with a panel to allow them to give money to other players. Alice has won a social media contest, and the admin is going in to give them their rewards. Server B performs its own initial get on Alice's data store, and rewards her the currency, saving to the data store afterwards.</p>\n<p>Do you see it? <strong>We're causing a data race!</strong> One of these servers is going to get overriden.</p>\n<p>That's because Server A has no idea the data was updated at all. It has its cached value, it isn't communicating with the data store at all anymore. When Alice leaves the game, Server A will save her <strong>cached data</strong>, and completely override the edits made in Server B.</p>\n<p><strong>This is why DataStore2 has always avoided giving the ability to edit data stores of players not in game.</strong> It is not safe. uright will also block the ability to edit data stores of players for this reason, though does not object to read-only support.</p>\n<p>One reason solving this is difficult is <a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a>.</p>\n<p>While the P (partition tolerance) might be a confusing allegory for Roblox, the core of it is that in a networked system like data stores, you can only either be <strong>consistent</strong>, meaning every time you get data, it is guaranteed to be correct, or <strong>available</strong>, meaning you have <em>some</em> data to get every time.</p>\n<p>Roblox data stores choose consistency. <code class=\"language-text\">:GetAsync()</code>, <code class=\"language-text\">:SetAsync()</code>, etc all yield until the true current value is retrieved. If the correct data cannot be retrieved, they will error.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-body\"><p>This isn't <em>totally</em> true, <a href=\"https://devforum.roblox.com/t/details-on-datastoreservice-for-advanced-developers/175804#heading--cac\">there's actually some form of cache</a>, but it's an undocumented implementation detail, and can certainly not be relied upon in the same way a one-get one-set library like uright can, and will appear inconsistent if you don't know its specific rules.</p></div></div>\n<p>One-get one-set libraries, on the other hand, choose availability. The moment initial get completes, <code class=\"language-text\">:get()</code> will always give you a value. Immediately, too! But you can't have both.</p>\n<p>Global data stores make solving this problem necessary. While I'm okay with not supporting multi-server player store reads, I still need the ability to support non-player specific data stores for my videos idea. DataStore2 never had the ability to support non-player specific data.</p>\n<h2>What are we working with?</h2>\n<p>Ignoring the actual, well, video part, what would we assume a video to look like in a data store?</p>\n<p>I think this is pretty reasonable:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This lets us separate videos from player stores. Our global data store to support this will have the name \"videos\", with the keys being the video ID. So something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">videos<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"dQw4w9WgXcQ\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rick Astley - Never Gonna Give You Up (Official Music Video)\"</span><span class=\"token punctuation\">,</span>\n        authorId<span class=\"token punctuation\">:</span> <span class=\"token number\">3514424760</span><span class=\"token punctuation\">,</span>\n        likes<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"QH2-TGUlwu4\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">...</span>etc etc<span class=\"token punctuation\">...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">...</span></code></pre></div>\n<p>In uright, you must declare your data stores up front, so let's do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- In stores/videos.lua</span>\n<span class=\"token keyword\">local</span> videos\n\n<span class=\"token comment\">-- This normally refers to the field inside a player's store.</span>\n<span class=\"token comment\">-- All of a player's data is saved as one big dictionary so</span>\n<span class=\"token comment\">-- we can get it all immediately (and to truly perform only one get).</span>\n<span class=\"token comment\">-- Global data stores aren't combined, so this will instead refer to</span>\n<span class=\"token comment\">-- the name of the global data store.</span>\nvideos<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"videos\"</span>\n\nvideos<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\nvideos<span class=\"token punctuation\">.</span>validate <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">strictInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> videos</code></pre></div>\n<p>Normally, creating a uright store requires a player...</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> playerStore <span class=\"token operator\">=</span> uright<span class=\"token punctuation\">:</span><span class=\"token function\">fromPlayer</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> moneyStore <span class=\"token operator\">=</span> playerStore<span class=\"token punctuation\">:</span><span class=\"token function\">getStore</span><span class=\"token punctuation\">(</span>MoneyStore<span class=\"token punctuation\">)</span>\nmoneyStore<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Will print how much money the player has</span></code></pre></div>\n<p>...but we don't have one to associate with, so let's just invent a new API.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> videosStore <span class=\"token operator\">=</span> uright<span class=\"token punctuation\">:</span><span class=\"token function\">getGlobalStore</span><span class=\"token punctuation\">(</span>VideosStore<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- We have to specify the key now, unlike :get(),</span>\n<span class=\"token comment\">-- they're a different interface after all.</span>\n<span class=\"token keyword\">local</span> videoStore <span class=\"token operator\">=</span> videosStore<span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n\nvideoStore<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Alright, now to give people the ability to like videos.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">LikeVideo<span class=\"token punctuation\">.</span>OnServerEvent<span class=\"token punctuation\">:</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> videoId<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- Bla bla bla validate the remote etc etc</span>\n    <span class=\"token function\">likeVideo</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then I'll start writing the implementation...</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">likeVideo</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- Hmm...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Oh right. The, the entire first part of the article, yeah. Okay, what are our options?</p>\n<h3>1. A basic set?</h3>\n<p>Ah, what the hell. The simplest solution is always the best, after all.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">likeVideo</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> videoStore <span class=\"token operator\">=</span> videosStore<span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> videoStore<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">-- Everything in uright must be treated immutably.</span>\n        <span class=\"token keyword\">local</span> newVideo <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n        newVideo<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        videoStore<span class=\"token punctuation\">:</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newVideo<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Nice and simple...oh wait. The real world is about to show up.</p>\n<p><strong>Server A</strong> starts to play video <code class=\"language-text\">dQw4w9WgXcQ</code>. We perform initial get, and capture the following data:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rick Astley - Never Gonna Give You Up (Official Music Video)\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> <span class=\"token number\">3514424760</span><span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In server A, 5 people give it a like. Our code will update our cached value appropriately:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rick Astley - Never Gonna Give You Up (Official Music Video)\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> <span class=\"token number\">3514424760</span><span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> <span class=\"token number\">1005</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But this is only a cache! The actual data has not been saved yet.</p>\n<p>While this is going on, <strong>Server B</strong> also gets the video <code class=\"language-text\">dQw4w9WgXcQ</code>, but for a different reason! The player who made it wants to change the title of the video. So that server sets the data store (saved, not just cache) to:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rick Rolled!!!\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> <span class=\"token number\">3514424760</span><span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Server A still has the old title! When Server A saves its own data, <strong>it's going to overwrite the title change!</strong></p>\n<p>And in case it couldn't get any worse, now <strong>Server C</strong> shows up and ALSO plays the video! 3 people give it a like in that server, with Server C now having the following data in its cache:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rick Rolled!!!\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> <span class=\"token number\">3514424760</span><span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> <span class=\"token number\">1003</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's all going horribly wrong!!!</p>\n<h3>2. UpdateAsync to the rescue?</h3>\n<p>Roblox data stores provide the <a href=\"https://developer.roblox.com/en-us/api-reference/function/GlobalDataStore/UpdateAsync\">UpdateAsync API</a>. This gives you the ability to perform a set/get at the same time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">dataStore<span class=\"token punctuation\">:</span><span class=\"token function\">UpdateAsync</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createNewValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is the only form of atomicity in Roblox, so savor it.</p>\n<p>We can't just use this every set, of course, we are a one-set API, sets should perform instantly.</p>\n<p>However, we can definitely keep in mind that, by the time we <em>are</em> saving, we have access to the most up to date value in the data store.</p>\n<p>What if we attached the behavior for UpdateAsync to our data store itself?</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- In stores/videos.lua</span>\n<span class=\"token keyword\">local</span> videos\n\nvideos<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"videos\"</span>\n\nvideos<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\nvideos<span class=\"token punctuation\">.</span>validate <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">strictInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    authorId<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">,</span>\n    likes<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>integer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- New!</span>\n<span class=\"token keyword\">function</span> videos<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>currentDataStoreValue<span class=\"token punctuation\">,</span> cachedValue<span class=\"token punctuation\">,</span> valueDuringInitialGet<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- Clone the CURRENT DATA STORE VALUE, which is provided by UpdateAsync.</span>\n    <span class=\"token comment\">-- This is so we don't override changes we don't think we care about.</span>\n    <span class=\"token keyword\">local</span> newValue <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>currentDataStoreValue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">-- Update with the new amount of likes, understanding it is an increment</span>\n    newValue<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">+</span><span class=\"token operator\">=</span> cachedValue<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">-</span> valueDuringInitialGet<span class=\"token punctuation\">.</span>likes\n\n    <span class=\"token comment\">-- Some other logic to update the new value if our cached value</span>\n    <span class=\"token comment\">-- was changed.</span>\n\n    <span class=\"token keyword\">return</span> newValue\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> videos</code></pre></div>\n<p>Our previous example would now change. Server A, when it's going to save its data, would just add on the new likes. Server B will change the title, but in our pseudo-code, it won't change the likes. Server C does the same as server A, just adds the likes.</p>\n<p>This is the only place we care about concurrency, everything else would just transparently call <code class=\"language-text\">:set</code>.</p>\n<p>There's no gotchas here, at least that I can see, this would work fundamentally.</p>\n<p>The big problem is making sure your result is correct. I can see it being very finnicky, and one wrong move will lead to some value being lost when it shouldn't have been, and you wouldn't even know it in Studio. Plus, I haven't specced this out for every reasonable use case. It already feels clunky to me that I needed to add a parameter for data during initial get, just because I couldn't figure out a nicer way to make sure likes were tracked!</p>\n<p>It's a footgun--it's really easy to just take the easy route and say <code class=\"language-text\">return cachedValue</code>, and ruin everything. It should be easy to do the right thing, and when you do the wrong thing, it should have a good chance of blowing up and telling you what to do differently.</p>\n<h3>3. Commits</h3>\n<p>This is the one I like. What if, instead of directly <code class=\"language-text\">:set</code>'ing over the data store, and having one place where we UpdateAsync, we just pretend we're always in UpdateAsync?</p>\n<p>Think Rodux. In Rodux, you don't set the entire state. You call actions, which perform smaller pieces of work.</p>\n<p>Let's see how that would look:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">likeVideo</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> videoStore <span class=\"token operator\">=</span> videosStore<span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> videoStore<span class=\"token punctuation\">:</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> newVideo <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n        newVideo<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> newVideo\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This may just look like the equivalent to <code class=\"language-text\">:Update</code> in DataStore2, but it's different in what you're <em>allowed to do with it</em>.</p>\n<p>That's because the commits serve two purposes.</p>\n<ol>\n<li>They update the cache directly.</li>\n</ol>\n<p>This is equivalent to <code class=\"language-text\">:Update</code>. The <code class=\"language-text\">video</code> we are being passed is the cached value. That's expected.</p>\n<ol start=\"2\">\n<li>It is called A SECOND TIME during UpdateAsync.</li>\n</ol>\n<p>So, unlike <code class=\"language-text\">:Update</code>, this commit is the key to concurrency.</p>\n<p>When we end up saving the video store, any commits that were run, but not saved, will be re-executed with the current data store value.</p>\n<p>In practice, this means we don't even have to worry about making sure titles are preserved. Our <code class=\"language-text\">likeVideo</code> function only concerns itself with likes. Our multi-server example is still solved!</p>\n<p>However, this has its own host of issues.</p>\n<h2>The delicate dance of commits</h2>\n<p>If you thought <code class=\"language-text\">update</code> on stores had footgun problems, wait until you think for a few extra seconds about commits.</p>\n<p>The ultimate fact that must be upheld is that a commit <strong>must be pure and deterministic</strong>, and <strong>must not rely on any external state</strong>. It <em>will</em> run twice, with <em>potentially different</em> pieces of data.</p>\n<p>Consider the following code incorrect usage of <code class=\"language-text\">commit</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> videoStore <span class=\"token operator\">=</span> videosStore<span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n\nvideoStore<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n    videoStore<span class=\"token punctuation\">:</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> newVideo <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n        newVideo<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> newVideo\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>All of this code will do the wrong thing, invisibly. This is exactly the same as our naive set implementation. We're not using the current value in the data store! We're relying on the external data point of \"value\".</p>\n<p>The hard thing is, we can't really detect this either! Even making a theoretical <a href=\"https://github.com/Kampfkarren/selene\">selene lint</a> borders on impossible in my head, since you likely still want to be able to use, say, libraries, which count as upvalues. The closest thing is requiring you use the argument passed to <code class=\"language-text\">commit</code> somehow, but this is far from the only way to mess up.</p>\n<p>Or even consider this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> videoStore <span class=\"token operator\">=</span> videosStore<span class=\"token punctuation\">:</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>videoId<span class=\"token punctuation\">)</span>\n\nvideoStore<span class=\"token punctuation\">:</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> newVideo <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n    newVideo<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">=</span> newLikeCount\n    <span class=\"token keyword\">return</span> newVideo\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The same exact problem, in a form that would be valid if this was a non-incremental value (such as the video's title), also with the hidden bug!</p>\n<p>There <em>is</em> however, a separate class of bug we <em>can</em> detect, to a degree.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">videoStore<span class=\"token punctuation\">:</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> newVideo <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">local</span> coAuthors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">-- Everyone helped!</span>\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> player <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>Players<span class=\"token punctuation\">:</span><span class=\"token function\">GetPlayers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>coAuthors<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">.</span>UserId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    newVideo<span class=\"token punctuation\">.</span>coAuthors <span class=\"token operator\">=</span> coAuthors\n\n    <span class=\"token keyword\">return</span> newVideo\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is a problem of determinism. <code class=\"language-text\">Players:GetPlayers()</code> could return different players depending on whether or not it is called immediately, or before saving.</p>\n<p>This can be detected, in more than zero circumstances, in development.</p>\n<p>We can perform a trick here, specifically in Studio, where we are not writing to a real data store anyway.</p>\n<p>In this example, when this commit is made, and we are the only player in the server, this will set the cached value to:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">-- title, likes, etc</span>\n    coAuthors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>...but when we pretend to save, our buggy commit implementation will instead look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">-- title, likes, etc</span>\n    coAuthors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>...since there are no players.</p>\n<p>With deterministic, pure commits, and without any other server to change the data (remember, we are not performing a real UpdateAsync call in Studio), these two values should never be different! I think we could potentially <strong>check deep equality</strong> on the cached value and the value that would've been saved, if it were real, the one with all the commits applied.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\">What did we learn?</div><div class=\"custom-block-body\"><ol>\n<li>Multi-server data store writing is hard.</li>\n<li>The solutions to it have some nasty footguns.</li>\n<li>In the end, :UpdateAsync() is your friend.</li>\n</ol></div></div>","timeToRead":12,"frontmatter":{"date":"2022-05-05","title":"Committing to Safety (in data stores)"}}},"pageContext":{"slug":"/committing-to-safety-in-data-stores/"}},
    "staticQueryHashes": ["2428300253"]}