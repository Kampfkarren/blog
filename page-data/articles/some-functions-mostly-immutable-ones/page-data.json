{
    "componentChunkName": "component---src-templates-article-tsx",
    "path": "/articles/some-functions-mostly-immutable-ones/",
    "result": {"data":{"markdownRemark":{"excerpt":"This is an assortment of functions that I've developed over time and like to use. They are all generally built with the followingâ€¦","html":"<p>This is an assortment of functions that I've developed over time and like to use. They are all generally built with the following expectations:</p>\n<ul>\n<li>All code is <code class=\"language-text\">--!strict</code>.</li>\n<li>Everything is properly typed. It should be impossible to write code that does the wrong thing, even if it makes the underlying implementation a little more complicated or messy with types.</li>\n<li>Both inputs and outputs cannot be mutated directly after the function is called.</li>\n<li>Unchanged inputs should be returned back as the same value such that <code class=\"language-text\">==</code> checks pass. (Note: This is not a requirement, but is generally an improvement if the check can be done in O(1))</li>\n</ul>\n<p>All code here is <a href=\"https://www.mozilla.org/en-US/MPL/2.0/\">MPL 2.0</a> licensed.</p>\n<h2><code class=\"language-text\">joinLists</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> joinLists<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span>?<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> final <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n\t<span class=\"token keyword\">local</span> changed <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> list <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">do</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>list <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Luau\"</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">#</span>list <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n\t\t\tcontinue\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">if</span> final <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n\t\t\tfinal <span class=\"token operator\">=</span> list\n\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>final <span class=\"token operator\">~=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Luau\"</span><span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> changed <span class=\"token keyword\">then</span>\n\t\t\t\tfinal <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>final<span class=\"token punctuation\">)</span>\n\t\t\t\tchanged <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\n\t\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>list<span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>final <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> final<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> final <span class=\"token keyword\">or</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should join no arguments into an empty list\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinLists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should join multiple lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinLists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return the same list if only one list is provided\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinLists</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should join lists with nils in between\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinLists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return the same list if one of the lists is empty\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinLists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">joinLists</code> takes a vararg of immutable lists and combines them together. It accepts nil as a value, which it will skip over. If the final list is equivalent to any given input, it will return that input directly.</p>\n<h2><code class=\"language-text\">filterList</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> filterList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> newList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> list <span class=\"token keyword\">do</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">#</span>newList <span class=\"token operator\">==</span> <span class=\"token operator\">#</span>list <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">return</span> list\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> newList\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">filterList</code> takes a list and a callback, of which it will return a new table of only the values in the list that pass the check. If all values pass the check, it will return the same list.</p>\n<h2><code class=\"language-text\">sort</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Return types must always be the same, we don't want a function that returns a string or number.</span>\n<span class=\"token comment\">-- Unfortunately, a Luau bug prevents this.</span>\n<span class=\"token comment\">-- type CompareCallback&lt;T> = ((T) -> string) | ((T) -> number) | ((T) -> boolean)</span>\nexport type CompareCallback<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> boolean\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> sort<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">:</span> CompareCallback<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> sorted <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> sortCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span>\n\n\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> sortCallback <span class=\"token keyword\">in</span> sortCallbacks <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">local</span> keyA <span class=\"token operator\">=</span> <span class=\"token function\">sortCallback</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">local</span> keyB <span class=\"token operator\">=</span> <span class=\"token function\">sortCallback</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">if</span> keyA <span class=\"token operator\">==</span> keyB <span class=\"token keyword\">then</span>\n\t\t\t\tcontinue\n\t\t\t<span class=\"token keyword\">end</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>keyA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"boolean\"</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>keyB<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"keyA == bool, keyB is not\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> keyB\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>keyA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>keyB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"typeof(keyA) ~= typeof(keyB)\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>keyA <span class=\"token punctuation\">::</span> any<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>keyB <span class=\"token punctuation\">::</span> any<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> sorted\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should sort with one key\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> x\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> x\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> x\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should sort with multiple keys\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> x\n\t<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">sort</code> takes a list and a vararg of functions that create keys to sort by. Key functions are called in order until one doesn't match.</p>\n<p>I created this because <code class=\"language-text\">table.sort</code> is frankly a pretty unwieldy interface to use, and this both simplifies the process of sorting a lot while also making it trivial to sort things by multiple keys.</p>\n<h2><code class=\"language-text\">localizeInt</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> LocalizationService <span class=\"token operator\">=</span> game<span class=\"token punctuation\">:</span><span class=\"token function\">GetService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LocalizationService\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> localizationTable\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">localizeInt</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">~=</span> <span class=\"token string\">\"number\"</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">error</span><span class=\"token punctuation\">(</span>`Not localizing a number<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">if</span> localizationTable <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n\t\tlocalizationTable <span class=\"token operator\">=</span> Instance<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LocalizationTable\"</span><span class=\"token punctuation\">)</span>\n\t\tlocalizationTable<span class=\"token punctuation\">:</span><span class=\"token function\">SetEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\tKey <span class=\"token operator\">=</span> <span class=\"token string\">\"translatedNumber\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\tSource <span class=\"token operator\">=</span> <span class=\"token string\">\"{1:num}\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\tValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token punctuation\">[</span>LocalizationService<span class=\"token punctuation\">.</span>RobloxLocaleId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"{1:num}\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> localizationTable\n\t\t<span class=\"token punctuation\">:</span><span class=\"token function\">GetTranslator</span><span class=\"token punctuation\">(</span>LocalizationService<span class=\"token punctuation\">.</span>RobloxLocaleId<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">:</span><span class=\"token function\">FormatByKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"translatedNumber\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">:</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>What?</h3>\n<p>A break from the immutable helpers, this function takes an integer and returns it as a number that is worth displaying. That is to say, it takes <code class=\"language-text\">1000</code> and turns it into <code class=\"language-text\">&quot;1,000&quot;</code>. It'll adjust itself depending on the user's locale, such as creating <code class=\"language-text\">&quot;1.000&quot;</code> if the user is in, say, a European country that uses decimal points.</p>\n<h2><code class=\"language-text\">shallowEqual</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> shallowEqual<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> y <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">~=</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Luau\"</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">#</span>x <span class=\"token operator\">~=</span> <span class=\"token operator\">#</span>y <span class=\"token keyword\">then</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> x <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">~=</span> y<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> y <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">~=</span> y<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should pass for identical lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should pass for equal lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should fail for inequal, same length lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should fail for lists of different length\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">shallowEqual</code> checks if two tables share the same keys and values. As a shallow check, it doesn't look inside nested tables, but I find this is extremely rarely necessary in immutable codebases. But if it is...</p>\n<h2><code class=\"language-text\">deepEqual</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> deepEqual<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span> <span class=\"token keyword\">and</span> <span class=\"token function\">typeof</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> x <span class=\"token punctuation\">::</span> any <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> y <span class=\"token punctuation\">::</span> any <span class=\"token keyword\">do</span>\n\t\t\t<span class=\"token keyword\">if</span> x<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n\t\t\t<span class=\"token keyword\">end</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">==</span> y\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should pass for identical lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should pass for equal lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should fail for inequal, same length lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should fail for lists of different length\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should pass for nested tables\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t\ty <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t\ty <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">deepEqual</code> checks completely through two tables to make sure every key and value match exactly, even if memory addresses differ. I don't remember what I made this for, since it looks like it's used 0 times in my entire codebase, while <code class=\"language-text\">shallowEqual</code> is used in 4 places. So I stand pretty firm that it just isn't useful.</p>\n<h2><code class=\"language-text\">flatten</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> flatten<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> flattened<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> list <span class=\"token keyword\">in</span> lists <span class=\"token keyword\">do</span>\n\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>list<span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>flattened <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> flattened<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> flattened\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should flatten lists\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">flatten</code> takes a list of lists and flattens them down into one list.</p>\n<h2><code class=\"language-text\">diffArray</code></h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Compares two arrays.</span>\n<span class=\"token comment\">-- Returns values only in A, values only in B, and values in both.</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> diffArray<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arrayA<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> arrayB<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> T <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">local</span> onlyInA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> onlyInB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">local</span> both <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">local</span> mappedA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> itemA <span class=\"token keyword\">in</span> arrayA <span class=\"token keyword\">do</span>\n\t\tmappedA<span class=\"token punctuation\">[</span>itemA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mappedA<span class=\"token punctuation\">[</span>itemA<span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> itemB <span class=\"token keyword\">in</span> arrayB <span class=\"token keyword\">do</span>\n\t\t<span class=\"token keyword\">local</span> count <span class=\"token operator\">=</span> mappedA<span class=\"token punctuation\">[</span>itemB<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">or</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n\t\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>onlyInB<span class=\"token punctuation\">,</span> itemB<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tmappedA<span class=\"token punctuation\">[</span>itemB<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>both<span class=\"token punctuation\">,</span> itemB<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">for</span> itemA<span class=\"token punctuation\">,</span> countLeft <span class=\"token keyword\">in</span> mappedA <span class=\"token keyword\">do</span>\n\t\t<span class=\"token keyword\">for</span> _ <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> countLeft <span class=\"token keyword\">do</span>\n\t\t\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>onlyInA<span class=\"token punctuation\">,</span> itemA<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n\t<span class=\"token keyword\">return</span> onlyInA<span class=\"token punctuation\">,</span> onlyInB<span class=\"token punctuation\">,</span> both\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3>Tests</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should give the difference between two arrays\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">-- stylua: ignore</span>\n\t<span class=\"token keyword\">local</span> onlyInA<span class=\"token punctuation\">,</span> onlyInB<span class=\"token punctuation\">,</span> both <span class=\"token operator\">=</span> <span class=\"token function\">diffArray</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n\n\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>onlyInA<span class=\"token punctuation\">)</span>\n\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>onlyInB<span class=\"token punctuation\">)</span>\n\ttable<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>both<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onlyInA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onlyInB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>both<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>What?</h3>\n<p><code class=\"language-text\">diffArray</code> takes two arrays and returns three lists: the values only in the first list, the values only in the second list, and the values in both. Position doesn't matter.</p>","timeToRead":7,"frontmatter":{"date":"2024-04-08","title":"Some functions, mostly immutable ones"}}},"pageContext":{"slug":"/some-functions-mostly-immutable-ones/"}},
    "staticQueryHashes": ["2428300253"]}